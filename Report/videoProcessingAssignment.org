#+LaTeX_CLASS: article
#+LaTeX_CLASS_OPTIONS: [a4paper]
#+LaTeX_HEADER: \usepackage{mathptmx}
#+TITLE: \includegraphics[width=\textwidth]{img/NTU.png} \\
#+TITLE: [2\baselineskip]
#+TITLE: Assignment ON \\
#+TITLE: EE4478 Digital video processing\\
#+TITLE: Tutorial 2-12 \\
#+TITLE: [3\baselineskip]
#+LaTeX_CLASS_OPTIONS: [12pt]
#+LaTeX_CLASS_OPTIONS: [titlepage]
#+AUTHOR: Xiong ChenYu(U1521516C) \\
#+AUTHOR: EEE \\
#+DATE: Apr. 8, 2018 \\
#+SUBJECT: Jpeg mepg4
#+TOC: listings

#+BEGIN_EXPORT latex
\newpage
#+END_EXPORT


* Assignment 2 Halffman Code
** Question 1

   To generate halfman code first is to sort combile the 2 items with lowest possibilites and resort. Until the table only have 2
items left.

   #+CAPTION: 1st round of sort
   #+ATTR_LaTeX: scale=0.1 :float=multicolumn
   #+ATTR_LaTeX: :height 0.2\textwidth :center
   | Symbol | Probalility |
   |--------+-------------|
   | C      |        0.05 |
   | A      |         0.1 |
   | F      |        0.12 |
   | D      |        0.18 |
   | B      |         0.2 |
   | E      |        0.35 |

  #+CAPTION: combile & 2nd round of sort
  #+ATTR_LaTeX: scale=0.75 :float=multicolumn
  #+ATTR_LaTeX: :height 0.2\textwidth :center
   | Symbol | Probalility |
   |--------+-------------|
   | F      |        0.12 |
   | AC     |        0.15 |
   | D      |        0.18 |
   | B      |         0.2 |
   | E      |        0.35 |

  #+CAPTION: combile & 3rd round of sort
   #+ATTR_LaTeX: scale=0.75 :float=multicolumn
   #+LABEL: fig:label
   | Symbol | Probalility |
   |--------+-------------|
   | D      |        0.18 |
   | B      |         0.2 |
   | ACF    | 0.27        |
   | E      |        0.35 |


  #+CAPTION: combile & 4th round of sort
   #+ATTR_LaTeX: scale=0.75 :float=multicolumn
   #+LABEL: fig:label
   | Symbol | Probalility |
   |--------+-------------|
   | ACF    |        0.27 |
   | E      |        0.35 |
   | BD     | 0.38        |

  #+CAPTION: combile & 5th round of sort
   #+ATTR_LaTeX: scale=0.75 :float=multicolumn
   #+LABEL: fig:label
   | Symbol | Probalility |
   |--------+-------------|
   | BD     |        0.38 |
   | ACFE   |        0.62 |

  Then I can use the table above to generate halfman tree, I will use the 0 for the low probalities. And 1 for the high probalities.

#+BEGIN_SRC plantuml :file img/btree1.png :exports results
  salt
  {
  {T
  +      Root                      | <color:red>1
  ++       0                 | <color:blue>0.38
  +++        0     | <color:green>D(0.18)
  +++        1     | <color:green>B(0.2)
  ++       1                | <color:blue>0.62
  +++        0     | <color:green>0.27
  ++++        0     | <color:orange>C(0.05)
  ++++        1     | <color:orange>A(0.1)
  +++        1     | <color:green>E(0.35)
  }
  }

#+END_SRC

#+CAPTION: Tutorial 2.1
#+ATTR_LaTeX: scale=0.5 :width 5cm
#+LABEL: fig:1
#+RESULTS:
[[file:img/btree1.png]]

After generate the halfman tree, I can generate the halfman code by go through the path

   #+CAPTION: Halfman code table
   #+ATTR_LaTeX: scale=0.1 :float=multicolumn
   #+ATTR_LaTeX: :height 0.2\textwidth :center
   | Symbol | Code |
   |--------+------|
   | C      | 1010 |
   | A      | 1011 |
   | F      |  100 |
   | D      |   00 |
   | B      |   01 |
   | E      |   11 |


#+BEGIN_EXPORT latex
\newpage
#+END_EXPORT

** Question 2

   To generate halfman code first is to sort combile the 2 items with lowest possibilites and resort. Until the table only have 2
items left.

   #+CAPTION: 1st round of sort
   #+ATTR_LaTeX: scale=0.1 :float=multicolumn
   #+ATTR_LaTeX: :height 0.2\textwidth :center
   | Symbol | Probalility |
   |--------+-------------|
   | A      |        0.04 |
   | B      |         0.1 |
   | C      |        0.11 |
   | D      |        0.15 |
   | G      |        0.18 |
   | E      |         0.2 |
   | F      |        0.22 |


  #+CAPTION: combile & 2nd round of sort
  #+ATTR_LaTeX: scale=0.75 :float=multicolumn
  #+ATTR_LaTeX: :height 0.2\textwidth :center
    | Symbol | Probalility |
    |--------+-------------|
    | C      |        0.11 |
    | AB     |        0.14 |
    | D      |        0.15 |
    | G      |        0.18 |
    | E      |         0.2 |
    | F      |        0.22 |

  #+CAPTION: combile & 3rd round of sort
   #+ATTR_LaTeX: scale=0.75 :float=multicolumn
   #+LABEL: fig:label
    | Symbol | Probalility |
    |--------+-------------|
    | D      |        0.15 |
    | G      |        0.18 |
    | E      |         0.2 |
    | F      |        0.22 |
    | ABC    |        0.25 |

  #+CAPTION: combile & 4th round of sort
   #+ATTR_LaTeX: scale=0.75 :float=multicolumn
   #+LABEL: fig:label
    | Symbol | Probalility |
    |--------+-------------|
    | E      |         0.2 |
    | F      |        0.22 |
    | ABC    |        0.25 |
    | DG     |        0.33 |

  #+CAPTION: combile & 5th round of sort
   #+ATTR_LaTeX: scale=0.75 :float=multicolumn
   #+LABEL: fig:label
    | Symbol | Probalility |
    |--------+-------------|
    | ABC    |        0.25 |
    | DG     |        0.33 |
    | EF     |        0.42 |

  #+CAPTION: combile & 6th round of sort
   #+ATTR_LaTeX: scale=0.75 :float=multicolumn
   #+LABEL: fig:label
    | Symbol | Probalility |
    |--------+-------------|
    | EF     |        0.42 |
    | ABCDG  |        0.58 |

  Then I can use the table above to generate halfman tree, I will use the 0 for the low probalities. And 1 for the high probalities.

#+BEGIN_SRC plantuml :file img/btree2.png :exports results
  salt
  {
  {T
  +      Root                      | <color:red>1
  ++       0                 | <color:blue>0.42
  +++        0     | <color:green>E(0.2)
  +++        1     | <color:green>F(0.22)
  ++       1                | <color:blue>0.58
  +++        0     | <color:green>0.25
  ++++        0     | <color:orange>C(0.11)
  ++++        1     | <color:orange>0.14
  +++++       0     | <color:purple>A(0.04)
  +++++       1     | <color:purple>B(0.1)
  +++        1     | <color:green>E(0.33)
  ++++        0     | <color:orange>D(0.15)
  ++++        1     | <color:orange>A(0.18)
  }
  }

#+END_SRC

#+CAPTION: Tutorial 2.2
#+ATTR_LaTeX: scale=0.5 :width 5cm
#+LABEL: fig:2
#+RESULTS:
[[file:img/btree2.png]]

After generate the halfman tree, I can generate the halfman code by go through the path

   #+CAPTION: Halfman code table
   #+ATTR_LaTeX: scale=0.1 :float=multicolumn
   #+ATTR_LaTeX: :height 0.2\textwidth :center
   | Symbol | Code |
   |--------+------|
   | A      | 1010 |
   | B      | 1011 |
   | C      |  100 |
   | D      |  110 |
   | G      |  111 |
   | E      |   00 |
   | F      |   01 |

#+BEGIN_EXPORT latex
\newpage
#+END_EXPORT

* Assignment 3 Arithmetic Coding

  My matric card is shown below in [[fig:3][Figure 3]] So my matric number is U1521516C my last 8 character is 1521561C.

#+CAPTION: Matriculation Card
#+ATTR_LaTeX: scale=0.5 :width 5cm
#+LABEL: fig:3
#+RESULTS:
[[./img/mat.jpg]]

   | Symbol | Frequet Number |
   |--------+----------------|
   |      1 |              3 |
   |      2 |              1 |
   |      5 |              2 |
   |      6 |              1 |
   |      C |              1 |

   SO each range will be $\frac{1}{8} = 0.125$, So we can gererate arthmetic table

   | Symbol | Probability   | Interval  Low | Interval   High | Interval |
   |--------+---------------+---------------+-----------------+----------|
   |      1 | $\frac{3}{8}$ |             0 |           0.375 |    0.375 |
   |      2 | $\frac{1}{8}$ |         0.375 |             0.5 |    0.125 |
   |      5 | $\frac{1}{4}$ |           0.5 |            0.75 |    0.25  |
   |      6 | $\frac{1}{8}$ |          0.75 |           0.875 |      0.125 |
   |      C | $\frac{1}{8}$ |         0.875 |               1 |      0.125 |

  | New Char      | Low Value                                        | High Value                                     |
  |---------------+--------------------------------------------------+------------------------------------------------|
  |             1 | 0                                                | 0.375                                          |
  |             5 | $0 + (0.375 - 0) \times 0.5 =  0.1875$                | $0 + (0.375 -0) \times 0.75 = 0.2813$               |
  |             2 | $0.1875 + (0.2813 - 0.1875) \times 0.375 = 0.2227$    | $0.1875 + (0.2813 - 0.1875) \times 0.5 = 0.2344$    |
  |             1 | $0.2227 + (0.2344 - 0.2227) \times 0 = 0.2227$        | $0.2227 + (0.2344 - 0.2227) \times 0.375 = 0.2271$  |
  |             5 | $0.2227 + (0.2271-0.2227) \times 0.5 = 0.2249$        | $0.2227 + (0.2271-0.2227) \times 0.75 = 0.2260$     |
  |             1 | $0.2249 + (0.2260 - 0.2249) \times 0 = 0.2249$        | $0.2249 + (0.2260 - 0.2249) \times 0.375 = 0.2253$  |
  |             6 | $0.2249 + (0.2253 - 0.2249) \times 0.75 = 0.2252$     | $0.2249 + (0.2253 - 0.2249) \times 0.875 = 0.22525$ |
  |             C | $0.2252 + (0.22525 - 0.2252) \times 0.875 = 0.22524375$ | $0.2252 + (0.22525 - 0.2252) \times 1 = 0.22525$    |

 | Decoded Number | Output Symbol |   Low |  High | Interval |
 |----------------+---------------+-------+-------+----------|
 |     0.22524375 |             1 |     0 | 0.375 |    0.375 |
 |        0.60065 |             5 |   0.5 |  0.75 |     0.25 |
 |         0.4022 |             2 | 0.375 |   0.5 |    0.125 |
 |         0.2177 |             1 |     0 | 0.375 |    0.375 |
 |         0.5806 |             5 |   0.5 |  0.75 |     0.25 |
 |         0.3223 |             1 |     0 | 0.375 |    0.375 |
 |         0.8594 |             6 |  0.75 | 0.875 |    0.125 |
 |         0.8750 |             C | 0.875 |     1 |    0.125 |


#+BEGIN_EXPORT latex
\newpage
#+END_EXPORT

* Assignment 4 Discrete Cosine Transform (DCT)

  $$A = \begin{Bmatrix}
      \frac{1}{2}cos(0) & \frac{1}{2}cos(0) & \frac{1}{2}cos(0) & \frac{1}{2}cos(0) \\
     \sqrt{\frac{1}{2}}cos(\frac{\pi}{8}) & \sqrt{\frac{1}{2}}cos(\frac{3\pi}{8}) & \sqrt{\frac{1}{2}}cos(\frac{5\pi}{8}) & \sqrt{\frac{1}{2}}cos(\frac{7\pi}{8}) \\
      \sqrt{\frac{1}{2}}cos(\frac{2\pi}{8}) & \sqrt{\frac{1}{2}}cos(\frac{6\pi}{8}) & \sqrt{\frac{1}{2}}cos(\frac{10\pi}{8}) & \sqrt{\frac{1}{2}}cos(\frac{14\pi}{8}) \\
      \sqrt{\frac{1}{2}}cos(\frac{3\pi}{8}) & \sqrt{\frac{1}{2}}cos(\frac{9\pi}{8}) & \sqrt{\frac{1}{2}}cos(\frac{15\pi}{8}) & \sqrt{\frac{1}{2}}cos(\frac{21\pi}{8})
   \end{Bmatrix}$$

$$X =\begin{Bmatrix}
      5 & 5 & 10 & 10 \\
      5 & 10 & 10 & 10 \\
      1 & 10 & 10 & 10 \\
      1 & 1 & 5 & 10
   \end{Bmatrix}$$

$$A^T = \begin{Bmatrix}
      \frac{1}{2}cos(0) &  \sqrt{\frac{1}{2}}cos(\frac{\pi}{8})& \sqrt{\frac{1}{2}}cos(\frac{2\pi}{8}) &  \sqrt{\frac{1}{2}}cos(\frac{3\pi}{8})\\
      \frac{1}{2}cos(0)& \sqrt{\frac{1}{2}}cos(\frac{3\pi}{8}) & \sqrt{\frac{1}{2}}cos(\frac{6\pi}{8})  & \sqrt{\frac{1}{2}}cos(\frac{9\pi}{8}) \\
       \frac{1}{2}cos(0)&  \sqrt{\frac{1}{2}}cos(\frac{5\pi}{8})& \sqrt{\frac{1}{2}}cos(\frac{10\pi}{8}) & \sqrt{\frac{1}{2}}cos(\frac{15\pi}{8})  \\
       \frac{1}{2}cos(0)&  \sqrt{\frac{1}{2}}cos(\frac{7\pi}{8})& \sqrt{\frac{1}{2}}cos(\frac{14\pi}{8})& \sqrt{\frac{1}{2}}cos(\frac{21\pi}{8})
   \end{Bmatrix}$$

$$Y' = A \times X  =\begin{Bmatrix}
      6 & 13 & 17.5 & 20 \\
      3.6955 & 2.6131 & 3.2664 & 0 \\
      0 & -7 & -2.5 & 0 \\
      -1.5307 & 1.0823 & 1.325 & 0
   \end{Bmatrix}$$


$$Y = Y' \times X  =\begin{Bmatrix}
      28.25 & -10.36 & -2.25 & -0.8486 \\
      4.7875 & 2.22374 & -1.092 & 1.4268 \\
      -4.75 & -1.2177 & 4.75 & 2.9398 \\
      0.45 & -1.073 & -1.983 & -0.237
   \end{Bmatrix}$$


* Assignment 5 Discrete Cosine Transform (DCT)

#+BEGIN_SRC matlab
clear all;
close all;
clc;
raw_input_img=imread('lena512c.jpg');
redChannel = dct2(raw_input_img(:, :, 1));
greenChannel = dct2(raw_input_img(:, :, 2));
blueChannel = dct2(raw_input_img(:, :, 3));
input_img = cat(3, redChannel, greenChannel, blueChannel);
QP=10;
quantized_img=round(input_img./QP);
rec_img=quantized_img.*QP;
n_img = cat(3,idct2(rec_img(:, :, 1)),idct2(rec_img(:, :, 2)),idct2(rec_img(:, :, 3)));
error= double(raw_input_img) - n_img;
subplot(1,4,1);
imshow(raw_input_img);
title('Original image');
subplot(1,4,2);
imshow(uint8(n_img));
title(['Reconstructed image (QP=' num2str(QP) ')']);
subplot(1,4,3);
imshow(error);
title('quantization error')
#+END_SRC

The output shown in below and I find that the higher the quant level the quality of the imgae will drop and more color appear in error.
[[./img/quant.png]]

* Assignment 6 Zig-Zag Scan
** Question a
   My name is xiongchenyu so the matric will be

$$in =\begin{matrix}
      x & i & o & n \\
      g & c & h & e \\
      n & y & u & x \\
      i & o & n & g
   \end{matrix}$$

The input matric in matlab will be [120 105 111 110;103 99 104 101;110 121 117 120;105 111 110 103]

out =

   120   105   103   110    99   111   110   104   121   105   111   117   101   120   110   103

** Question b

  in = [4    -1     0     0; 1     0     0     0  ;-1    0     1     0; 0     0     0     0]

out = 4	-1	1	-1	0	0	0	0	0	0	0	1	0	0	0	0


** Question c

   I just change the input to 8 * 8 I think the origin code will support artitury shape to do the zigzag.

in =[

     7    -1     0    -2    -1     1     0    -1;
     1     0     0     0     0     0     0     0;
     0     0     0     0     0     0     0     0;
     1     0     0     0     0     0     0     0;
    -1     0     0     0     1     0     0     1;
     0     0     0     0     0     0     0     0;
     0     0     0     0     0     0     0     0;
     0     0     0     0    -1     0     0     0]

out =

  Columns 1 through 22

     7    -1     1     0     0     0    -2     0     0     1    -1     0     0     0    -1     1     0     0     0     0     0     0

  Columns 23 through 44

     0     0     0     0     0     0    -1     0     0     0     0     0     0     0     0     0     0     1     0     0     0     0

  Columns 45 through 64

     0     0     0     0     0     0     0     0     0     0     1     0     0    -1     0     0     0     0     0     0


* Assignment 7 Run-Level Coding (RLC)

** Question a
   #+BEGIN_SRC matlab

x =  round(200 * rand(1,40));
x(x>40) = 0;

array = [1 5 2 1 5 1 6 zeros(1,28)]
   #+END_SRC


x =

  Columns 1 through 21

     0     0     0     0     0     7    28     0     0     0     0     0     5     9     0     0     0     0     0     0     0

  Columns 22 through 40

     0     0    30     5     0    30    18     0    35    32     0     0     0     0    14     0     0     0     0

** Question b
   #+BEGIN_SRC matlab

sizeOfSequence = 40
y = round(35 * rand(1,sizeOfSequence));
for i = 1:length(y)
    y(i) = array(y(i));
end

   #+END_SRC
   
y =

  Columns 1 through 21

     0     1     1     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     1     0     0

  Columns 22 through 40

     0     0     0     0     0     0     1     0     0     0     0     5     1     0     0     2     0     6     0

     
* Assignment 8 JPEG / MPEG Intra frame encoding

  #+BEGIN_SRC matlab
A=imread('photo.jpg');
[Height,Width,Depth]=size(A);
  #+END_SRC

#+CAPTION: Orgion
#+ATTR_LaTeX: scale=0.75
#+LABEL: fig:label
[[./img/photo.jpg]]

[[./img/p15_9.png]]

| Type     | Value     |
|----------+-----------|
| Oscale   | 9         |
| PSNR     | 31.61dB   |
| SNR(Cb)  | 34.99dB	 |
| PSNR(Cr) | 34.24dB   |

[[./img/p3_83.png]]

| type     | value     |
|----------+-----------|
| oscale   | 0.83      |
| psnr     | 45.41db   |
| snr(cb)  | 50.49db	 |
| psnr(cr) | 50.25db   |

[[./img/p6_332.png]]

| Type     | Value     |
|----------+-----------|
| Oscale   | 0.332     |
| PSNR     | 49.43dB   |
| SNR(Cb)  | 54.69dB	 |
| PSNR(Cr) | 54.64dB   |




* Assignment 9 Motion estimation
** Apply quantization error on MC prediction error

** Question a

** Question b
** Question c


* Assignment 10

1. Uncomment % A=transpose(A);  line 26
2. Uncomment % B=transpose(B);  line 63
3. The image size normaliztion is incorrect.
#+BEGIN_SRC matlab
% Make image size divisible by 16
[X,Y] = size(A);
if mod(X,16)~=0
    Height = floor(X/16)*16;
else
    Height = X;
end
if mod(Y,16)~=0
    Width = floor(Y/16)*16;
else
    Width = Y;
end
#+END_SRC

change to 8 as

#+BEGIN_SRC matlab
% Make image size divisible by 8
[X,Y] = size(A);
if mod(X,8)~=0
    Height = floor(X/16)*16;
else
    Height = X;
end
if mod(Y,8)~=0
    Width = floor(Y/16)*16;
else
    Width = Y;
end

#+END_SRC

line 23

4. change inFile1='table_40.raw'; to 'table_39.raw' line 23
5. change F = int16(41:43); to F = int16(40:43); line 50
6. change legend('MC','No MC', 0) to legend('MC','No MC', 'best') line 114
7. change legend('MC','No MC', 0) to legend('MC','No MC', 'best') line 118



* Assignment 11 Stereo Imaging

Original : D = round(Y2{nf}/2);  %adjust depth factor '2'

Modify To : D = round(Y2{nf}/5);
